.PHONY: default print_stuff make_directory depend 


###################################################################################

# assuming we are in a directory of this structure
#   BASEDIR/courses/which_semester/which_course/hwconfig/which_assignment

MY_DIR = $(CURDIR)

# assuming the core files for config, compilation, running, & grading are here:
#   BASEDIR/gradingcode/grading
#   BASEDIR/gradingcode/modules

GRADINGCODE=$(MY_DIR)/../../../../../gradingcode

###################################################################################


# base directory for course
course_dir=$(MY_DIR)/../..


# just the last part of the current directory
assignment=$(notdir $(MY_DIR))


# Where the compiled binaries are stored, under the class directory
my_bin=$(course_dir)/bin/$(assignment)


###################################################################################
# source files

common_files=$(GRADINGCODE)/grading/TestCase.cpp \
		$(GRADINGCODE)/modules/myersDiff.cpp \
		$(GRADINGCODE)/modules/tokens.cpp \
		$(GRADINGCODE)/modules/tokenSearch.cpp \
		$(GRADINGCODE)/modules/diffNaive.cpp \
		$(GRADINGCODE)/modules/textMasking.cpp \
		$(GRADINGCODE)/modules/clean.cpp \
		$(GRADINGCODE)/modules/difference.cpp

config_files=$(GRADINGCODE)/grading/config.cpp 

compile_files=$(GRADINGCODE)/grading/compile.cpp \
		$(GRADINGCODE)/grading/seccomp_functions.cpp \
		$(GRADINGCODE)/grading/execute.cpp 

runner_files=$(GRADINGCODE)/grading/runner.cpp \
		$(GRADINGCODE)/grading/seccomp_functions.cpp \
		$(GRADINGCODE)/grading/execute.cpp


validate_files=	$(GRADINGCODE)/grading/validator.cpp \
		$(GRADINGCODE)/grading/seccomp_functions.cpp \
		$(GRADINGCODE)/grading/execute.cpp 


# put the obj files in the current directory
# note we are assuming there are no file name conflicts between grading/ & modules/
common_files_obj   := $(notdir $(patsubst %.cpp,%.o,$(common_files)))
config_files_obj   := $(notdir $(patsubst %.cpp,%.o,$(config_files)))
compile_files_obj  := $(notdir $(patsubst %.cpp,%.o,$(compile_files)))
runner_files_obj   := $(notdir $(patsubst %.cpp,%.o,$(runner_files)))
validate_files_obj := $(notdir $(patsubst %.cpp,%.o,$(validate_files)))


###################################################################################
# build rules

#default: print_stuff  make_directory depend \

default: print_stuff  make_directory depend \
	$(my_bin)/configure.out \
	$(my_bin)/assignment_config.json \
	$(my_bin)/compile.out \
	$(my_bin)/run.out \
	$(my_bin)/validate.out


print_stuff:
	@ echo 'making assignment'  $(assignment)
#	@ echo "course_dir: " $(course_dir)
#	@ echo "my_bin: " $(my_bin)
#	@ echo "assignment: " $(assignment)
#	@ echo "GRADINGCODE: " $(GRADINGCODE)
#	@ echo "MY_DIR: " $(MY_DIR)


make_directory:
	@test -d $(my_bin) || mkdir $(my_bin)



DEPFILE = my_makedepend_file
DEPTOKEN = '\# MAKEDEPENDS'

# -Y does not include system file dependencies (change rarely)
#DEPFLAGS = -Y -f $(DEPFILE) -s $(DEPTOKEN) 
DEPFLAGS = -f $(DEPFILE) -s $(DEPTOKEN) -p $(MY_DIR)


gcc=clang++ 
#gcc=clang++  -std=c++11 
#gcc=g++ -std=c++11 
CFLAGS = -g


# note cannot use &>/dev/null in dash
$(DEPFILE):
	@echo $(DEPTOKEN) > $(DEPFILE)
	@makedepend $(DEPFLAGS) -- $(CFLAGS) -- $(common_files) $(config_files) $(compile_files) $(runner_files) $(validate_files) >/dev/null 2>&1


depend:
	rm -f $(DEPFILE)
	$(MAKE) $(DEPFILE)


#%.o: %.cpp
#	$(gcc)  -g -DDEBUG -I $(GRADINGCODE) -I $(MY_DIR) -c $< -o $@

%.o: $(GRADINGCODE)/grading/%.cpp
	$(gcc)  -g -DDEBUG -I $(GRADINGCODE) -I $(MY_DIR) -c $< -o $@
%.o: $(GRADINGCODE)/modules/%.cpp
	$(gcc)  -g -DDEBUG -I $(GRADINGCODE) -I $(MY_DIR) -c $< -o $@



$(my_bin)/configure.out: $(common_files_obj) $(config_files_obj)
	$(gcc) -g $(common_files_obj) $(config_files_obj) -o $(my_bin)/configure.out

$(my_bin)/assignment_config.json: $(my_bin)/configure.out
	$(my_bin)/configure.out $(my_bin)/assignment_config.json

$(my_bin)/compile.out: $(common_files_obj) $(compile_files_obj)
	$(gcc) -g $(common_files_obj) $(compile_files_obj) -lseccomp -o $(my_bin)/compile.out

$(my_bin)/run.out: $(common_files_obj) $(runner_files_obj)
	$(gcc) -g $(common_files_obj) $(runner_files_obj) -lseccomp -o $(my_bin)/run.out

$(my_bin)/validate.out: $(common_files_obj) $(validate_files_obj)
	$(gcc) -g $(common_files_obj) $(validate_files_obj) -lseccomp -o $(my_bin)/validate.out


clean:
	rm -f *.o $(DEPFILE)
	rm -r $(my_bin)


###################################################################################
# put this file in the last line of your Makefile
sinclude $(DEPFILE)
