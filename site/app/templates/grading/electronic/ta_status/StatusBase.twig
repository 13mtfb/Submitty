<script>
    function tracing(xBuckets,yValue) {
        var trace1 = {
            x: xBuckets,
            y: yValue,
            mode: 'markers',
            name: 'Students with Each Score',
            type: 'bar',
            text: yValue,
            textposition: 'auto',
            hoverinfo: 'none',
            marker: {
                color: 'rgb(48,99,152)',
                opacity: 1.0,
                line: {
                    color: 'rbg(170,170,170)',
                    width: 1.5
                }
            }
        };
        var data = [trace1];
        return data;
    }

    function fillBuckets(range,increment,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min){
        let loop = Math.ceil(range/increment);
        let tracking = min;
        for(i = 0;i<loop;i++){
            betterBuckets.set(tracking,0);
            tracking = +parseFloat(tracking+increment).toPrecision(4);
            if(i===(loop-1)){
                xBuckets.push(+parseFloat(tracking-increment).toPrecision(4)+" to <="+max);
            }
            else{
               xBuckets.push(+parseFloat(tracking-increment).toPrecision(4)+" to <"+tracking);
            }
        }
        var maxMin = tracking-increment;
        var ct = 0;
        for(i = 0;i<xValue.length;i++){
           ct++;
           for(var [key,value] of betterBuckets){
                if(key===maxMin){
                    if(xValue[i]>=key&&xValue[i]<=max){
                       betterBuckets.set(key,value+1);
                   }
                }
               else{
                    if(xValue[i]>=key && xValue[i]<(key+increment)){
                        betterBuckets.set(key,value+1);
                    }
                }
           }
        }
        for(var[key,value]of betterBuckets){
            if(value>modeCount){
                modeCount=value;
                mode = key+" to <"+(key+increment);
            }
            yValue.push(value);
        }
        return mode;
    }


    function fillBucketsForRange(range,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min){
        let bucketSize = Math.floor(range / 10);
        if (bucketSize === 0) {
            bucketSize = range / 10;
        }

        return fillBuckets(range,bucketSize,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
    }


    function createNewBuckets(range,buckets,xValue,yValue,xBuckets,mode,modeCount,max,min) {
        var bucketInputTotal = document.getElementById("bucket-size-total");
        var bucketInputAuto = document.getElementById("bucket-size-auto");

        xBuckets = [];
        yValue=[];
        betterBuckets=new Map();
        mode=0;
        modeCount=0;
        {% if overall_average.getAverageScore() != "" %}
            if( bucketInputTotal.value !=''){
                let bucketInputTotalValue = parseFloat(bucketInputTotal.value);
                if (isNaN(bucketInputTotalValue) || bucketInputTotalValue === 0) {
                    alert('Error: Invalid bucket size.');
                    return;
                }
                mode=fillBuckets(rangeT,bucketInputTotalValue,betterBuckets,xValueT,yValue,xBuckets,mode,modeCount,maxT,minT);
                var dataTotal=tracing(xBuckets,yValue);
                Plotly.newPlot('myDiv', dataTotal, layout, {displayModeBar: false,displaylogo: false});
                bucketInputTotal.value='';
                document.getElementById("mySmallDiv").innerHTML='<b>Mean: </b>'+{{ overall_average.getAverageScore() }}+'&nbsp&nbsp&nbsp&nbsp'+'<b>Mode: </b>'
                +mode+'&nbsp&nbsp&nbsp&nbsp'+'<b>Median: </b>'+median+'&nbsp&nbsp&nbsp&nbsp'+ '<b>Maximum: </b>'+maxT+
                '&nbsp&nbsp&nbsp&nbsp'+'<b>Minimum: </b>'+minT+'&nbsp&nbsp&nbsp&nbsp'+'<b>Standard Deviation: </b>'+
                {{ overall_average.getStandardDeviation()  }}+'&nbsp&nbsp&nbsp&nbsp'+'<b>Range: </b>'+rangeT;
                return mode;
            }
        {% endif %}
        {% if autograded_average != null or autograded_average.getCount() != 0  %}
            let bucketInputAutoValue = parseFloat(bucketInputAuto.value);
            if(bucketInputAuto.value!=''){
                if (isNaN(bucketInputAutoValue) || bucketInputAutoValue === 0) {
                    alert('Error: Invalid bucket size.');
                    return ;
                }
                mode=fillBuckets(range,bucketInputAutoValue,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
                var dataAuto = tracing(xBuckets,yValue);
                Plotly.newPlot('myDiv3', dataAuto, layout, {displayModeBar: false,displaylogo: false});
                bucketInputAuto.value='';
                document.getElementById("mySmallDiv3").innerHTML='<b>Mean: </b>'+{{ autograded_average.getAverageScore() | default('0') }}+'&nbsp&nbsp&nbsp&nbsp'+'<b>Mode: </b>'
                +mode+'&nbsp&nbsp&nbsp&nbsp'+'<b>Median: </b>'+median+'&nbsp&nbsp&nbsp&nbsp'+ '<b>Maximum: </b>'+max+
                '&nbsp&nbsp&nbsp&nbsp'+'<b>Minimum: </b>'+min+'&nbsp&nbsp&nbsp&nbsp'+'<b>Standard Deviation: </b>'+
                {{ autograded_average.getStandardDeviation()  }}+'&nbsp&nbsp&nbsp&nbsp'+'<b>Range: </b>'+range;
                return mode;
            }
        {% endif %}
        mode=fillBucketsForRange(range,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
        return  mode;
    }
</script>
<body onload="document.getElementById('defaultOpen').click();">

{% set double_blind = false %}
{% set single_blind = false %}

<!-- If grader is limited access or full access grader -->
{% if core.getUser().getGroup() == 2 or core.getUser().getGroup() == 3 %}
<div class="content gradeable_message">
    <h1>Your Responsibility as a Grader</h1>
    <p>
        You will be reviewing materials submitted by students and these materials are considered confidential.<br>
        The author of this material is entitled to copyright protection. As such,
    <ul>
        <li style="margin-left:30px;margin-bottom:10px;">You may not use or share any of these materials or ideas without explicit permission from the author.</li>
        <li style="margin-left:30px;margin-bottom:10px;">You may not retain this material.<br>
            You must delete/destroy any copies of this material after your review and grading of the work is complete.</li>
{% if double_blind == true %}            
        <li style="margin-left:30px;margin-bottom:10px;">Your instructor has configured the grading for this assignment to be <em>blinded</em>.<br>
            You should not attempt to discover the identities of the students.<br>
            However, their identities may be unintentionally or unavoidably revealed.<br>
            Please respect the students' privacy.</li>
{% endif %}
    </ul>
    </p><p>
        Please communicate with the instructor if you realize you have a conflict of interest with a student that you have been assigned to grade.
    </p>
</div>
<!-- Else if grader is a student peer grader -->
{% elseif core.getUser().getGroup() == 4 %}
<div class="content gradeable_message">
    <h1>Your Responsibility as a Peer Grader</h1>
    <p>
        You will be reviewing materials submitted by your classmates and these materials are considered confidential.<br>
        Your classmate, the author of this material, is entitled to copyright protection. As such,
    <ul>
        <li style="margin-left:30px;margin-bottom:10px;">You may not use or share any of these materials or ideas without explicit permission from the author.</li>
        <li style="margin-left:30px;margin-bottom:10px;">You may not retain this material -- you must delete/destroy any copies of this material after your review and grading of the work is complete.</li>
{% if double_blind == true %}            
        <li style="margin-left:30px;margin-bottom:10px;">Your instructor has configured the grading for this assignment to be double-blind.<br>
            You should not attempt to discover the identities of your classmates.<br>
            However, the identities of the classmates may be unintentionally or unavoidably revealed.<br>
            Please respect your classmates' privacy.</li>
{% elseif single_blind == true %}
        <li style="margin-left:30px;margin-bottom:10px;">Your instructor has configured the grading for this assignment to be single-blind.</li>
{% else %}
        <li style="margin-left:30px;margin-bottom:10px;">Your instructor has configured the grading for this assignment to be unblinded.</li>
{% endif %}
    </ul>
    </p><p>
        Please communicate with your instructor if you realize you have a conflict of interest with a peer that you have been assigned to grade.
    </p>
</div>
{% endif %}

<div class = "content">
    <h1>Status of {{ gradeable_title }}</h1>

    {% if rotating_sections_error %}
        <div name="grader-warning-popup status">
            <p> WARNING: This page may be inaccurate.  <br />
                This gradeable assigns graders by Rotating Section, but Rotating Sections are not set up properly. <br />
                To fix Rotating Sections, go to the Manage Sections page. <br />
            </p>
        </div>
    {% endif %}

    {# Top buttons #}
    <div style="margin-top: 20px; vertical-align:bottom;">
        {% if graded_percentage != -1 or core.getUser().accessFullGrading() or peer %}
            <a class="btn btn-primary" style="float: left"
                {% if core.getUser().accessAdmin() or (core.getUser().getGradingRegistrationSections()|length == 0) %}
                    href="{{ details_view_all_url }}">
                {% else %}
                    href="{{ details_url }}">
                {% endif %}

                Grading Index
            </a>
            <ul style="margin-left: 25px; margin-top: -5px; float: left">
                <li>View Submissions</li>
                {%  if team_assignment %}
                    <li>Manage Teams</li>
                {% endif %}
                {% if component_averages|length != 0 %}
                    <li>Manual Grading</li>
                    <li>Grade Inquiries</li>
                {% endif %}
            </ul>
            {% if core.getUser().getGradingRegistrationSections()|length != 0 %}
                {% if overall_average == null or overall_average.getCount() == 0 %}
                    {% if team_assignment %}
                        <a class="btn btn-primary"
                           href="{{ grade_url }}" style="float: right;">
                            My Next Ungraded Team
                        </a>
                    {% else %}
                        <a class="btn btn-primary"
                           href="{{ grade_url }}" style="float: right;">
                            My Next Ungraded Student
                        </a>
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    </div>
    {# /Top Button #}
</div>

<div class = "content">
    {% if graded_percentage == -1 %}
        <div class="sub">
            No Grading To Be Done! :)
        </div>
    {% elseif core.getUser().getGroup() < 4 %}
        <div class = "tab">
            <div class =tab-bar-wrapper">
                <a class="nav-bar normal-btn key_to_click" tabindex="0"  onclick="openStat(this, 'numerical-data'), this.blur()" id="defaultOpen">Data</a>
                <a class="nav-bar normal-btn key_to_click" tabindex="0"  id="btn-hist-auto" onclick="openStat(this, 'autograding-score-histogram'), this.blur()">Autograding Histogram</a>
                <a class="nav-bar normal-btn key_to_click" tabindex="0"  id="btn-comp" onclick="openStat(this, 'component-averages'), this.blur()">Manual Grading Component Averages</a>
                <a class="nav-bar normal-btn key_to_click" tabindex="0"  id="btn-hist-tot" onclick="openStat(this, 'total-score-histogram'), this.blur()">Overall Histogram</a>
            </div>
            {% set bTA = [] %}
            {% set tTA = [] %}
            {% set bAuto = [] %}

            {% set VerConf = 0 %}
            {% set noSub = 0 %}
            {% set noActive = 0 %}
            {% set GradeInq = 0 %}
            {% set IncompGrading = 0 %}
            {% set cancelledSub = 0 %}
            {# Iterate through all the Scores #}
            {% for ov in overall_scores %}
                {# If Autograded, add the points to the array of autograded scores#}
                {% if ov.getAutoGradedGradeable().getHighestVersion() != 0 %}
                    {% if ov.getTaGradedGradeable.getGradedGradeable.getSubmitter().getRegistrationSection() != NULL %}
                        {% if ov.getGradeable().getAutogradingConfig().getTotalNonExtraCredit() != 0  %}
                            {% if ov.getAutoGradedGradeable().getTotalPoints() >=0 or ov.getAutoGradedGradeable().getTotalPoints() <0 %}
                                {%  set bAuto = bAuto|merge( [ov.getAutoGradedGradeable().getTotalPoints() ]) %}
                            {% else %}
                                {% set cancelledSub = cancelledSub+1 %}
                            {% endif %}
                        {% endif %}
                    {% endif %}
                {% else %}

                {% endif %}

                {% if not ov.getAutoGradedGradeable().hasSubmission() %}
                    {# if no submission and not in Null section add to count #}
                    {% if ov.getTaGradedGradeable.getGradedGradeable.getSubmitter().getRegistrationSection() != NULL %}
                        {% set noSub = noSub +1 %}
                    {% endif %}
                {% elseif ov.getAutoGradedGradeable().getActiveVersion() == 0 %}
                    {# if no active version and not in Null section add to count #}
                    {% if ov.getTaGradedGradeable.getGradedGradeable.getSubmitter().getRegistrationSection() != NULL %}
                        {% set noActive = noActive + 1 %}
                    {% endif %}
                {% elseif ov.getGradeable().isTaGrading() %}
                    {% if ov.getOrCreateTaGradedGradeable().anyGrades() %}
                        {# if grade inquiry and not in Null section add to count #}
                        {% if ov.hasActiveRegradeRequest() %}
                            {% if ov.getTaGradedGradeable.getGradedGradeable.getSubmitter().getRegistrationSection() != NULL %}
                                {% set noActive = noActive+1 %}
                            {% endif %}
                        {% elseif ov.getTaGradedGradeable().hasVersionConflict() %}
                            {# if version conflict and not in Null section add to count #}
                            {% if ov.getTaGradedGradeable.getGradedGradeable.getSubmitter().getRegistrationSection() != NULL %}
                                {% set VerConf = VerConf +1 %}
                            {% endif %}

                        {% elseif not ov.isTaGradingComplete() %}
                            {# if assignment incomplete and not in Null section add to count #}
                            {% set IncompGrading = IncompGrading +1 %}
                        {% elseif ov.isTaGradingComplete() %}
                            {# otherwise add the overall grade to array and total score possible to array (possible future use) #}
                            {% if ov.getTaGradedGradeable.getGradedGradeable.getSubmitter().getRegistrationSection() != NULL %}
                                {% set bTA = bTA|merge( [ ov.getTaGradedGradeable.getTotalScore()  ]) %}
                                {% set tTA = tTA|merge( [ ov.getGradeable().getManualGradingPoints() ]) %}

                            {% endif %}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endfor %}
            {% if (overall_average == null or overall_average.getCount() == 0) and component_averages|length == 0%}
                <script>
                    document.getElementById("btn-hist-tot").className+= " disabled-btn";
                    document.getElementById("btn-hist-tot").style.visibility = "hidden";
                </script>

            {% else %}
                <div id = "total-score-histogram" class = "page-content">
                {# Setup for Histogram of Total Scores #}
                    <br>
                    <input style='width: auto' type='text' id='bucket-size-total' name='bucket-val' value="" aria-label="Enter bucket size" placeholder="Enter bucket size" />
                    <input name="sub-tot" class="btn btn-primary key_to_click" tabindex="0" id="submit_bucket" type="submit" value="Submit Bucket Size for Total" onclick="createNewBuckets(rangeT,betterBuckets,xValueT,yValue,xBuckets,mode,modeCount,maxT,minT)"/>
                <div id="myDiv"><!-- Plotly chart will be drawn inside this DIV --></div>

                <script>

                    var betterBuckets = new Map();
                    var buttonLayerHeight = 1.0;
                    var ct = 0;
                    var maxT = 0;
                    var minT = {{ overall_total }} + 50;
                    var median = 0;
                    var mode = 0;
                    var modeCount = 0;
                    var rangeT = 0;

                    var xValueT = [{{ bTA | join(',') }}];
                    xValueT.sort((a, b) => a - b);
                    var yValue = [];
                    var yValue2 = [];
                    var xBuckets = [];

                    if (xValueT.length > 0) {
                        minT = xValueT[0];
                        maxT = xValueT[xValueT.length-1];
                        rangeT = maxT - minT;
                        let pivot = Math.floor((xValueT.length - 1) / 2);
                        if (xValueT.length % 2 === 0) {
                            median = (xValueT[pivot] + xValueT[pivot+1]) / 2;
                        }
                        else {
                            median = xValueT[pivot];
                        }
                    }

                    mode = fillBucketsForRange(rangeT, betterBuckets, xValueT, yValue, xBuckets, mode, modeCount, maxT, minT);

                    if (maxT==0 && minT==50) {
                        minT=0;
                    }

                    var trace1 = {
                        x: xBuckets,
                        y: yValue,
                        mode: 'markers',
                        name: 'Students with Each Score',
                        type: 'bar',
                        text: yValue,
                        textposition: 'auto',
                        hoverinfo: 'none',
                        marker: {
                            color: 'rgb(48,99,152)',
                            opacity: 1.0,
                            line: {
                                color: 'rbg(170,170,170)',
                                width: 1.5
                            }
                        }
                    };

                    var data = [trace1];

                    var layout = {
                        title: 'Students with Each Score',
                        xaxis: {
                            title: 'Scores'
                        },
                        yaxis:{
                            title: 'Number of Students'
                        },
                        barmode: 'overlay',
                        font: {
                            family: '"Source Sans Pro", sans-serif',
                        }
                    };

                    Plotly.newPlot('myDiv', data, layout, {displayModeBar: false,displaylogo: false});

                </script>
                <div id="mySmallDiv">
                    <script>
                        document.write('<b>Mean: </b>'+{{ overall_average.getAverageScore() }}+'&nbsp&nbsp&nbsp&nbsp'+'<b>Mode: </b>'
                        +mode+'&nbsp&nbsp&nbsp&nbsp'+'<b>Median: </b>'+median+'&nbsp&nbsp&nbsp&nbsp'+ '<b>Maximum: </b>'+maxT+
                        '&nbsp&nbsp&nbsp&nbsp'+'<b>Minimum: </b>'+minT+'&nbsp&nbsp&nbsp&nbsp'+'<b>Standard Deviation: </b>'+
                        {{ overall_average.getStandardDeviation()  }}+'&nbsp&nbsp&nbsp&nbsp'+'<b>Range: </b>'+rangeT);
                    </script>
                </div>
                <br />
                Version Conflicts: {{ VerConf }}
                <br />
                No Submissions: {{ noSub }}
                <br />
                No Active Versions: {{ noActive }}
                <br />
                Grade Inquiries: {{ GradeInq }}
                <br />
                Incomplete Grading: {{ IncompGrading }}
                <br />
                Cancelled Submissions: {{ cancelledSub }}
                <br/>
                <br/>
                Double-click on the chart to zoom out
                <hr>
            </div>
            {% endif %}

            {# Tabs Here #}

            
        </div>
    {% else %}
        {# This needs to be updated after randomization works correctly for Teams #}
        {% if team_assignment %}
            {# Update this after Teams work fine with Randomized Peer Assignments <br>
            <b>Total Teams assigned to grade:</b> {{ peer_total }} </b> <br>
            <b>Current percentage of student grading done:</b> {{ peer_percentage }}% ({{ peer_graded }}/{{ peer_total }})</b>
            #}
        {% else %}
            <b>Total peers assigned to grade:</b> {{ peer_total }} </b> <br>
            <b>Current percentage of student grading done:</b> {{ peer_percentage }}% ({{ peer_graded }}/{{ peer_total }})</b>
        {% endif %}
    {% endif %}
    {# Footer here #}  
</div>
</body>
{# Tab Buttons #}
<script>

    function openStat(evt, statName) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("page-content");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }


        // Get all elements with class="btn btn-primary" and remove the class "active"
        tablinks = document.getElementsByClassName("nav-bar");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active-btn", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(statName).style.display = "block";
        evt.className += " active-btn";

    }
    // Get the element with id="defaultOpen" and click on it
    let defaultOpen = document.getElementById('defaultOpen');
    if (defaultOpen) {
        defaultOpen.click();
    }

    function editZipDownload(download_zip_url, limited) {
        var results = document.getElementById("results_folder");
        var active = document.getElementById("active_version");

        if (results.checked == true && active.checked == true){
            download_option = "both";
        }
        else if (results.checked == true) {
            download_option = "results";
        }
        else if (active.checked == true) {
            download_option = "active";
        }
        else {
            download_option = "all";
        }

        if (limited) {
            if (download_option == "all") {
                $("#zip_link").attr("href", download_zip_url);
            }
            else {
                $("#zip_link").attr("href", download_zip_url + "?type=limited_" + download_option);
            }
        }
        else {
            $("#zip_link").attr("href", download_zip_url + "?type=" + download_option);
        }
    }
</script>
